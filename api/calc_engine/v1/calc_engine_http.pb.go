// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v3.12.4
// source: calc_engine/v1/calc_engine.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCalcEnginegetSum = "/api.calc_engine.v1.CalcEngine/getSum"

type CalcEngineHTTPServer interface {
	GetSum(context.Context, *GetSumRequest) (*GetSumReply, error)
}

func RegisterCalcEngineHTTPServer(s *http.Server, srv CalcEngineHTTPServer) {
	r := s.Route("/")
	r.GET("/sum/{a}/{b}", _CalcEngine_GetSum0_HTTP_Handler(srv))
}

func _CalcEngine_GetSum0_HTTP_Handler(srv CalcEngineHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSumRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCalcEnginegetSum)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSum(ctx, req.(*GetSumRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSumReply)
		return ctx.Result(200, reply)
	}
}

type CalcEngineHTTPClient interface {
	GetSum(ctx context.Context, req *GetSumRequest, opts ...http.CallOption) (rsp *GetSumReply, err error)
}

type CalcEngineHTTPClientImpl struct {
	cc *http.Client
}

func NewCalcEngineHTTPClient(client *http.Client) CalcEngineHTTPClient {
	return &CalcEngineHTTPClientImpl{client}
}

func (c *CalcEngineHTTPClientImpl) GetSum(ctx context.Context, in *GetSumRequest, opts ...http.CallOption) (*GetSumReply, error) {
	var out GetSumReply
	pattern := "/sum/{a}/{b}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCalcEnginegetSum))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
